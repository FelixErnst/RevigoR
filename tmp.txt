#' @include RevigoR.R
NULL


#' @rdname plotRevigo
#' 
#' @title Plotting ReViGo data
#' 
#' @description 
#' plotting stuff
#'
#' @param x a RevigoRData object
#' @param xType a RevigoRData object
#' @param yType a RevigoRData object
#' @param pointSizeType a RevigoRData object
#' @param colourType a RevigoRData object
#'
#' @return a ggplot2 plot
#' 
#' @importFrom colorRamps matlab.like2
#' @export
#'
#' @examples
#' \donttest{
#' rd <- getRevigo()
#' plotRevigoScatter(rd)
#' plotRevigoTreemap(rd)
#' }
setMethod(
  f = "plotRevigoScatter", 
  signature = signature(x = "RevigoRData"),
  definition = function(x,
                        xType,
                        yType,
                        pointSizeType,
                        colourType,
                        palette,
                        colour,
                        size){
    requireNamespace("gpplot2", quietly = TRUE)
    browser()
    # input check
    checkX <- c("alphabetical","pvalue","uniqueness","X","Y")
    checkY <- c("pvalue","uniqueness","X","Y")
    checkPoint <- c("same","point_size","pvalue","uniqueness","X","Y")
    checkColour <- c("same","unique","pvalue","uniqueness","X","Y")
    labelNames <- c("alphabetical" = "Alphabetical",
                    "point_size" = "Point size",
                    "log10pvalue" = "-log10(p)",
                    "uniqueness" = "uniqueness",
                    "plot_X" = "Semantic space X",
                    "plot_Y" = "Semantic space Y")
    .checkValueValidity(xType,
                        checkX)
    xType <- .convert_types_to_colnames(xType)
    .checkValueValidity(yType,
                        checkY)
    yType <- .convert_types_to_colnames(yType)
    .checkValueValidity(pointSizeType,
                        checkPoint)
    pointSizeType <- .convert_types_to_colnames(pointSizeType)
    .checkValueValidity(colourType,
                        checkColour)
    colourType <- .convert_types_to_colnames(colourType)
    # get data and subset
    data <- getTableData(x)
    data <- data[!is.na(data$plot_X) | !is.na(data$plot_Y),]
    data$log10pvalue <- abs(data$log10pvalue)
    ex <- data[data$dispensability < 0.15,]
    # plot data
    plot <- ggplot(data = data)
    # point and colour options
    if(pointSizeType == "same" &&
       colourType == "same"){
      plot <- plot + 
        geom_point(mapping = aes_string(x = xType,
                                        y = yType),
                   colour = colour,
                   size = size,
                   alpha = I(0.6))
    } else if(pointSizeType == "same"){
      plot <- plot + 
        geom_point(mapping = aes_string(x = xType,
                                        y = yType,
                                        colour = colourType),
                   size = size,
                   alpha = I(0.6))
    } else if(colourType == "same"){
      plot <- plot + 
        geom_point(mapping = aes_string(x = xType,
                                        y = yType,
                                        size = pointSizeType),
                   colour = colour,
                   alpha = I(0.6))
    } else {
      plot <- plot + 
        geom_point(mapping = aes_string(x = xType,
                                        y = yType,
                                        colour = colourType,
                                        size = pointSizeType), 
                   alpha = I(0.6))
    }
    #
    if(pointSizeType == "same"){
      plot <- plot + 
        geom_point(mapping = aes_string(x = xType,
                                        y = yType),
                   size = size,
                   shape = 21, 
                   fill = "transparent", 
                   colour = I(alpha("black", 0.6)))
    } else {
      plot <- plot + 
        geom_point(mapping = aes_string(x = xType,
                                      y = yType,
                                      size = pointSizeType), 
                 shape = 21, 
                 fill = "transparent", 
                 colour = I(alpha("black", 0.6)))
    }
    #
    if(xType %in% c("log10pvalue","uniqueness","plot_X","plot_Y")){
      x_range = max(data[,xType]) - min(data[,xType])
      plot <- plot +
        xlim(min(data$plot_X) - x_range/10,
             max(data$plot_X) + x_range/10)
    }
    if(yType %in% c("log10pvalue","uniqueness","plot_X","plot_Y")){
      y_range = max(data[,xType]) - min(data[,xType])
      plot <- plot +
        ylim(min(data$plot_Y) - y_range/10,
             max(data$plot_Y) + y_range/10)
    }
    # remaining plot stuff
    plot <- plot +
      theme_bw() + 
      theme(legend.key = element_blank()) +
      labs(y = labelNames[xType], 
           x = labelNames[yType]) +
      geom_text(data = ex, 
                aes_string(x = xType, 
                           y = yType, 
                           label = "description"),
                colour = I(alpha("black", 0.85)),
                size = 3)
    #
    if(colourType == "unique"){
      plot <- plot + 
        scale_colour_brewer(name = "GO Terms",
                            palette = palette)
    } else {
      plot <- plot + 
        scale_colour_gradientn(name = labelNames[colourType],
                             colours = colorRamps::matlab.like2(100),
                             limits = c(0,max(data$log10pvalue)) )
    }
    #
    if(pointSizeType == "same"){
      plot <- plot + 
        scale_size(name = "one size",
                   range = c(10,10),
                   guide = FALSE)
    } else {
      plot <- plot + 
        scale_size(name = labelNames[pointSizeType],
                   breaks = c(5,10,20,30),
                   range = c(5, 30))
    }
    return(plot)
  }
)

.convert_types_to_colnames <- function(type){
  if(type %in% c("X","Y")){
    type <- paste0("plot_",type)
  }
  if(type == "pvalue"){
    type <- "log10pvalue"
  }
  return(type)
}

#' @rdname plotRevigo
#' 
#' @param type one of \code{"frequency"}, \code{"pvalue"}, \code{"uniqueness"} 
#' or \code{"dispensability"}
#' @param palette name of a colour palette, which 
#' \code{ggplot2::scale_fill_brewer} accepts
#' 
#' @import treemapify
#' @export
setMethod(
  f = "plotRevigoTreemap", 
  signature = signature(x = "RevigoRData"),
  definition = function(x,
                        type,
                        palette){
    requireNamespace("ggplot2", quietly = TRUE)
    requireNamespace("treemapify", quietly = TRUE)
    cols <- c("frequency" = "frequency",
              "pvalue" = "log10pvalue",
              "uniqueness" = "uniqueness",
              "dispensability" = "dispensability")
    # input check
    assertive::assert_is_a_non_missing_nor_empty_string(type)
    .checkValueValidity(type,
                        names(cols))
    # get data and make values positive
    data <- getTreemapData(x)
    data$log10pvalue <- abs(data$log10pvalue)
    # plot data
    plot <- ggplot(data,
                   mapping = aes_string(area = cols[type], 
                                        fill = "representative", 
                                        label = "description",
                                        subgroup = "representative")) +
      geom_treemap() +
      geom_treemap_subgroup_border() +
      geom_treemap_subgroup_text(place = "centre",
                                 grow = TRUE,
                                 colour = "black",
                                 fontface = "bold",
                                 min.size = 0) +
      geom_treemap_text(colour = "black",
                        place = "topleft",
                        fontface = "italic",
                        reflow = TRUE) +
      scale_fill_brewer(palette = palette) +
      labs(title = "REVIGO Gene Ontology treemap") +
      guides(fill = FALSE)
    return(plot)
  }
)
