#' @include RevigoR.R
NULL


#' @rdname plotRevigo
#' 
#' @title Plotting ReViGo data
#' 
#' @description 
#' plotting stuff
#'
#' @param x a RevigoRData object
#'
#' @return a ggplot2 plot
#' @export
#'
#' @examples
#' \donttest{
#' rd <- getRevigo()
#' plotRevigoScatter(rd)
#' plotRevigoTreemap(rd)
#' }
setMethod(
  f = "plotRevigoScatter", 
  signature = signature(x = "RevigoRData"),
  definition = function(x){
    requireNamespace("gpplot2", quietly = TRUE)
    # get data and subset
    data <- getTableData(x)
    data <- data[!is.na(data$plot_X) | !is.na(data$plot_Y),]
    ex <- data[data$dispensability < 0.15,]
    x_range = max(data$plot_X) - min(data$plot_X)
    y_range = max(data$plot_Y) - min(data$plot_Y)
    
    
    # add options for
    # x axis: alphabetical, log size, uniqueness, X, Y
    # y axis: log size, uniqueness, X, Y
    # point size: same size, log size, uniqueness, X, Y
    # color: same colour, unique color, log size, uniqueness, X, Y
    
    # plot data
    plot <- ggplot(data = data) + 
      geom_point(aes_(x = ~plot_X,
                      y = ~plot_Y, 
                      colour = ~log10pvalue, 
                      size = ~plot_size), 
                 alpha = I(0.6) ) + 
      geom_point(aes_(x = ~plot_X, 
                      y = ~plot_Y, 
                      size = ~plot_size), 
                 shape = 21, 
                 fill = "transparent", 
                 colour = I(alpha("black", 0.6))) + 
      geom_text(data = ex, 
                aes_(x = ~plot_X, 
                     y = ~plot_Y, 
                     label = ~description),
                colour = I(alpha("black", 0.85)),
                size = 3 ) + 
      scale_colour_gradientn(name = "log10(p)",
                             colours = c("blue",
                                         "green",
                                         "yellow",
                                         "red"),
                             limits = c(min(data$log10pvalue), 0) ) + 
      scale_size(name = "log10(p)",
                 range = c(5, 30)) + 
      labs(y = "Semantic space X", 
           x = "Semantic space Y") + 
      xlim(min(data$plot_X) - x_range/10,
           max(data$plot_X) + x_range/10) + 
      ylim(min(data$plot_Y) - y_range/10,
           max(data$plot_Y) + y_range/10) + 
      theme_bw() + 
      theme(legend.key = element_blank())
    return(plot)
  }
)

#' @rdname plotRevigo
#' 
#' @param type one of \code{"frequency"}, \code{"pvalue"}, \code{"uniqueness"} 
#' or \code{"dispensability"}
#' @param palette name of a colour palette, which 
#' \code{ggplot2::scale_fill_brewer} accepts
#' 
#' @import treemapify
#' @export
setMethod(
  f = "plotRevigoTreemap", 
  signature = signature(x = "RevigoRData"),
  definition = function(x,
                        type,
                        palette){
    requireNamespace("ggplot2", quietly = TRUE)
    requireNamespace("treemapify", quietly = TRUE)
    cols <- c("frequency" = "frequency",
              "pvalue" = "log10pvalue",
              "uniqueness" = "uniqueness",
              "dispensability" = "dispensability")
    # input check
    assertive::assert_is_a_non_missing_nor_empty_string(type)
    .checkValueValidity(type,
                        names(cols))
    # get data and make values positive
    data <- getTreemapData(x)
    data$log10pvalue <- abs(data$log10pvalue)
    # plot data
    plot <- ggplot(data,
                   mapping = aes_string(area = cols[type], 
                                        fill = "representative", 
                                        label = "description",
                                        subgroup = "representative")) +
      geom_treemap() +
      geom_treemap_subgroup_border() +
      geom_treemap_subgroup_text(place = "centre",
                                 grow = TRUE,
                                 colour = "black",
                                 fontface = "bold",
                                 min.size = 0) +
      geom_treemap_text(colour = "black",
                        place = "topleft",
                        fontface = "italic",
                        reflow = TRUE) +
      scale_fill_brewer(palette = palette) +
      labs(title = "REVIGO Gene Ontology treemap") +
      guides(fill = FALSE)
    return(plot)
  }
)
